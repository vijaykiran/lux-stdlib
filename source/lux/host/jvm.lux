##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (lux (control (monoid #as m)
                       (functor #as F)
                       (monad #as M #refer (#only do map% seq%))
                       (enum #as E))
              (codata function)
              (data (list #refer #all #open ("" List/Functor List/Fold
                                             "list:" List/Monad))
                    (number/int #refer #all #open ("i:" Int/Ord Int/Number))
                    maybe
                    tuple
                    (text #refer (#only <>) #open ("text:" Text/Monoid Text/Eq)))
              (meta lux
                    ast
                    syntax)))

## [Types]
(defsyntax #export (Array [dimensions (?^ nat^)] type)
  (:: Lux/Monad (wrap (@list (foldL (lambda [inner _] (` (#;DataT "#Array" (@list (~ inner)))))
                                    type
                                    (repeat (? 1 dimensions) []))))))

## [Utils]
## Types
(deftype StackFrame (^ java.lang.StackTraceElement))
(deftype StackTrace (Array StackFrame))

(deftype Modifier Text)
(deftype #rec JvmType
  (& #type-name Text
     #type-params (List JvmType)))

(deftype AnnotationParam
  (, Text AST))

(deftype Annotation
  (& #ann-name Text
     #ann-params (List AnnotationParam)))

(deftype MemberDecl
  (& #member-name      Text
     #member-modifiers (List Modifier)
     #member-anns      (List Annotation)))

(deftype FieldDecl
  JvmType)

(deftype MethodDecl
  (& #method-inputs (List JvmType)
     #method-output JvmType
     #method-exs    (List JvmType)))

(deftype ArgDecl
  (& #arg-name Text
     #arg-type JvmType))

(deftype MethodDef
  (& #method-vars (List ArgDecl)
     #return-type JvmType
     #return-body AST
     #throws-exs  (List JvmType)))

(deftype ExpectedInput
  (& #opt-input? Bool
     #input-type JvmType))

(deftype ExpectedOutput
  (& #ex-output? Bool
     #opt-output? Bool
     #output-type JvmType))

## Functions
(def (class->type class)
  (-> JvmType AST)
  (case class
    (\template [<prim> <class>]
     [[<prim> #;Nil]
      (' (;^ <class>))])
    [["boolean" java.lang.Boolean]
     ["byte"    java.lang.Byte]
     ["short"   java.lang.Short]
     ["int"     java.lang.Integer]
     ["long"    java.lang.Long]
     ["float"   java.lang.Float]
     ["double"  java.lang.Double]
     ["char"    java.lang.Character]]
    
    ["void" #;Nil]
    (` ;Unit)
    
    [name params]
    (if (text:= "Array" name)
      (` (^ (~ (symbol$ ["" "#Array"])) (~@ (map class->type params))))
      (` (^ (~ (symbol$ ["" name])) (~@ (map class->type params)))))))

(def (prepare-args args)
  (-> (List ExpectedInput) (Lux (, (List AST) (List AST) (List AST) (List JvmType))))
  (do Lux/Monad
    [vars (seq% Lux/Monad (repeat (size args) (gensym "")))
     #let [pairings (map (: (-> (, (, Bool JvmType) AST) (, AST (List AST)))
                            (lambda [[[opt? arg-class] var]]
                              (let [base-arg-type (class->type arg-class)]
                                (if opt?
                                  [(` (Maybe (~ base-arg-type)))
                                   (@list var (` (: (~ base-arg-type)
                                                    (case (~ var)
                                                      (#;Some (~ var)) (~ var)
                                                      #;None           ;_jvm_null))))]
                                  [base-arg-type
                                   (@list)]))))
                         (zip2 args vars))
           var-types (map first pairings)
           var-rebinds (map second pairings)
           arg-classes (map second args)]]
    (wrap [vars var-types (list:join var-rebinds) arg-classes])))

(def (stack-trace->text trace)
  (-> StackTrace Text)
  (let [size (_jvm_arraylength (:! StackTrace trace))
        idxs (E;range Int/Enum 0 (i:+ -1 size))]
    (|> idxs
        (map (: (-> Int Text)
                (lambda [idx]
                  (_jvm_invokevirtual ("java.lang.Object" []) "toString" [] (_jvm_aaload trace idx) []))))
        (interpose "\n")
        (foldL text:++ "")
        )))

(def (get-stack-trace t)
  (-> (^ java.lang.Throwable) StackTrace)
  (_jvm_invokevirtual ("java.lang.Throwable" []) "getStackTrace" [] t []))

(def #export (throwable->text t)
  (-> (^ java.lang.Throwable) Text)
  ($ text:++
    (_jvm_invokevirtual ("java.lang.Object" []) "toString" [] t [])
    "\n"
    (|> t get-stack-trace stack-trace->text)))

## Parsers
(def jvm-type^
  (Parser JvmType)
  ((: (-> (,) (Parser JvmType))
      (lambda jvm-type^ [_]
         (||^ (@list (do Parser/Monad
                       [name local-symbol^]
                       (wrap [name (@list)]))
                     (form^ (do Parser/Monad
                              [name local-symbol^
                               params (*^ (jvm-type^ []))]
                              (wrap [name params])))))))
   []))

(def annotation-params^
  (Parser (List AnnotationParam))
  (record^ (*^ (tuple^ (&^ local-tag^ id^)))))

(def annotation^
  (Parser Annotation)
  (form^ (&^ local-symbol^
             annotation-params^)))

(def annotations^'
  (Parser (List Annotation))
  (do Parser/Monad
    [_ (tag!^ ["" "ann"])]
    (tuple^ (*^ annotation^))))

(def annotations^
  (Parser (List Annotation))
  (do Parser/Monad
    [anns?? (?^ annotations^')]
    (wrap (? (@list) anns??))))

(def member-decl^
  (Parser MemberDecl)
  (do Parser/Monad
    [modifiers (*^ local-tag^)
     name local-symbol^
     anns annotations^]
    (wrap [name modifiers anns])))

(def throws-decl'^
  (Parser (List JvmType))
  (do Parser/Monad
    [_ (tag!^ ["" "throws"])]
    (tuple^ (*^ jvm-type^))))

(def throws-decl^
  (Parser (List JvmType))
  (do Parser/Monad
    [exs? (?^ throws-decl'^)]
    (wrap (? (@list) exs?))))

(def method-decl'^
  (Parser MethodDecl)
  (do Parser/Monad
    [inputs (tuple^ (*^ jvm-type^))
     output jvm-type^
     exs throws-decl^]
    (wrap [inputs output exs])))

(def method-decl^
  (Parser (, MemberDecl MethodDecl))
  (form^ (&^ member-decl^
             method-decl'^)))

(def field-decl^
  (Parser (, MemberDecl FieldDecl))
  (form^ (&^ member-decl^
             jvm-type^)))

(def arg-decl^
  (Parser ArgDecl)
  (form^ (&^ local-symbol^ jvm-type^)))

(def method-def'^
  (Parser MethodDef)
  (do Parser/Monad
    [inputs (tuple^ (*^ arg-decl^))
     output jvm-type^
     exs throws-decl^
     body id^]
    (wrap [inputs output body exs])))

(def method-def^
  (Parser (, MemberDecl MethodDef))
  (form^ (&^ member-decl^
             method-def'^)))

(do-template [<name> <tag>]
  [(def <name> (tag?^ ["" <tag>]))]

  [optional-tag?^ "?"]
  [ex-tag?^       "!"]
  [unsafe?^       "unsafe"])

(def exp-input^
  (Parser ExpectedInput)
  (&^ optional-tag?^
      jvm-type^))

(def exp-output^
  (Parser ExpectedOutput)
  (do Parser/Monad
    [ex? ex-tag?^
     opt? optional-tag?^
     return jvm-type^]
    (wrap [ex? opt? return])))

## Generators
(def (gen-simple-class (\slots [#type-name #type-params]))
  (-> JvmType (Lux AST))
  (using Lux/Monad
    (if (text:= "Array" type-name)
      (case type-params
        (#;Cons [param _] #;Nil)
        (cond (text:= "boolean" param)
              (wrap (text$ "[Z"))

              (text:= "byte" param)
              (wrap (text$ "[B"))

              (text:= "short" param)
              (wrap (text$ "[S"))

              (text:= "int" param)
              (wrap (text$ "[I"))

              (text:= "long" param)
              (wrap (text$ "[J"))

              (text:= "float" param)
              (wrap (text$ "[F"))

              (text:= "double" param)
              (wrap (text$ "[D"))

              (text:= "char" param)
              (wrap (text$ "[D"))

              ## default
              (wrap (text$ (<> "[L#{param};"))))
        
        _
        (fail "Array must have 1 argument."))
      (wrap (text$ type-name)))))

(def (gen-generic-class (\slots [#type-name #type-params]))
  (-> JvmType AST)
  ## (using Lux/Monad
  ##   (wrap (form$ (@list (text$ type-name)
  ##                       (tuple$ (map gen-generic-class type-params))))))
  (` ((~ (text$ type-name)) [(~@ (map gen-generic-class type-params))])))

(def (gen-annotation-param [name value])
  (-> AnnotationParam (, AST AST))
  [(text$ name) value])

(def (gen-annotation [name params])
  (-> Annotation AST)
  (` ((~ (text$ name))
      (~ (record$ (map gen-annotation-param params))))))

(def (gen-method-decl [[name modifiers anns] [inputs output exs]])
  (-> (, MemberDecl MethodDecl) (Lux AST))
  (do Lux/Monad
    [=exs (map% % gen-simple-class exs)
     =inputs (map% % gen-simple-class inputs)
     =output (gen-simple-class output)]
    (wrap (` ((~ (text$ name))
              [(~@ (map text$ modifiers))]
              [(~@ (map gen-annotation anns))]
              [(~@ =exs)]
              [(~@ =inputs)]
              (~ =output))))))

(def (gen-field-decl [[name modifiers anns] class])
  (-> (, MemberDecl FieldDecl) (Lux AST))
  (do Lux/Monad
    [=class (gen-simple-class class)]
    (wrap (` ((~ (text$ name))
              [(~@ (map text$ modifiers))]
              [(~@ (map gen-annotation anns))]
              (~ =class)
              )))))

(def (gen-arg-decl [name type])
  (-> ArgDecl (Lux AST))
  (do Lux/Monad
    [=type (gen-simple-class type)]
    (wrap (form$ (@list (symbol$ ["" name]) =type)))))

(def (gen-method-def [[name modifiers anns] [inputs output body exs]])
  (-> (, MemberDecl MethodDef) (Lux AST))
  (do Lux/Monad
    [=exs (map% % gen-simple-class exs)
     =inputs (map% % gen-arg-decl inputs)
     =output (gen-simple-class output)]
    (wrap (` ((~ (text$ name))
              [(~@ (map text$ modifiers))]
              [(~@ (map gen-annotation anns))]
              [(~@ =exs)]
              [(~@ =inputs)]
              (~ =output)
              (~ body))))))

(def (gen-expected-output [ex? opt? output] body)
  (-> ExpectedOutput AST (, AST AST))
  (let [type (class->type output)
        [body type] (if opt?
                      [(` (;;??? (~ body)))
                       (` (Maybe (~ type)))]
                      [body type])
        [body type] (if ex?
                      [(` (;;try (~ body)))
                       (` (Either Text (~ type)))]
                      [body type])]
    [body type]))

## [Syntax]
(defsyntax #export (defclass [name local-symbol^] [super jvm-type^] [interfaces (tuple^ (*^ jvm-type^))]
                     [annotations annotations^]
                     [fields (*^ field-decl^)]
                     [methods (*^ method-def^)])
  (do Lux/Monad
    [=super (gen-simple-class super)
     =interfaces (map% % gen-simple-class interfaces)
     =fields (map% % gen-field-decl fields)
     =methods (map% % gen-method-def methods)]
    (wrap (@list (` (;_jvm_class (~ (text$ name)) (~ =super)
                                 [(~@ =interfaces)]
                                 [(~@ (map gen-annotation annotations))]
                                 [(~@ =fields)]
                                 [(~@ =methods)]))))))

(defsyntax #export (definterface [name local-symbol^] [supers (tuple^ (*^ jvm-type^))]
                     [annotations annotations^]
                     [members (*^ method-decl^)])
  (do Lux/Monad
    [=supers (map% % gen-simple-class supers)
     =members (map% % gen-method-decl members)]
    (wrap (@list (` (;_jvm_interface (~ (text$ name)) [(~@ =supers)]
                                     [(~@ (map gen-annotation annotations))]
                                     (~@ =members)))))))

(defsyntax #export (object [super jvm-type^] [interfaces (tuple^ (*^ jvm-type^))]
                           [methods (*^ method-def^)])
  (do Lux/Monad
    [=super (gen-simple-class super)
     =interfaces (map% % gen-simple-class interfaces)
     =methods (map% % gen-method-def methods)]
    (wrap (@list (` (;_jvm_anon-class (~ =super)
                                      [(~@ =interfaces)]
                                      [(~@ =methods)]))))))

(defsyntax #export (program [args symbol^] body)
  (:: Lux/Monad (wrap (@list (` (;_jvm_program (~ (symbol$ args))
                                               (~ body)))))))

(defsyntax #export (??? expr)
  (do Lux/Monad
    [g!temp (gensym "")]
    (wrap (@list (` (let [(~ g!temp) (~ expr)]
                      (if (;_jvm_null? (~ g!temp))
                        #;None
                        (#;Some (~ g!temp)))))))))

(defsyntax #export (try expr)
  (:: Lux/Monad (wrap (@list (` (;_jvm_try (#;Right (~ expr))
                                           (~ (' (_jvm_catch "java.lang.Exception" e
                                                             (#;Left (throwable->text e)))))))))))

(defsyntax #export (instance? [class jvm-type^] obj)
  (do Lux/Monad
    [=class (gen-simple-class class)]
    (wrap (@list (` (;_jvm_instanceof (~ =class) (~ obj)))))))

(defsyntax #export (locking lock body)
  (do Lux/Monad
    [g!lock (gensym "")
     g!body (gensym "")
     g!_ (gensym "")]
    (wrap (@list (` (let [(~ g!lock) (~ lock)
                          (~ g!_) (;_jvm_monitorenter (~ g!lock))
                          (~ g!body) (~ body)
                          (~ g!_) (;_jvm_monitorexit (~ g!lock))]
                      (~ g!body)))))
    ))

(defsyntax #export (null? obj)
  (:: Lux/Monad (wrap (@list (` (;_jvm_null? (~ obj)))))))

(defsyntax #export (new$ [class jvm-type^] [args (tuple^ (*^ exp-input^))] [unsafe? unsafe?^])
  (do Lux/Monad
    [[vars var-types var-rebinds arg-classes] (prepare-args args)
     #let [=class (gen-generic-class class)]
     =arg-classes (map% % gen-simple-class arg-classes)
     #let [new-expr (` (;_jvm_new (~ =class) [(~@ =arg-classes)] [(~@ vars)]))
           return-type (class->type class)
           [new-expr return-type] (if unsafe?
                                    [(` (try (~ new-expr))) (` (Either Text (~ return-type)))]
                                    [new-expr return-type])]]
    (wrap (@list (` (: (-> (, (~@ var-types)) (~ return-type))
                       (lambda [[(~@ vars)]]
                         (let [(~@ var-rebinds)]
                           (~ new-expr)))))))))

(do-template [<name> <op> <use-self?>]
  [(defsyntax #export (<name> [class jvm-type^] [method local-symbol^] [args (tuple^ (*^ exp-input^))]
                              [expected-output exp-output^] [unsafe? unsafe?^])
     (do Lux/Monad
       [[vars var-types var-rebinds arg-classes] (prepare-args args)
        g!self (gensym "self")
        #let [=class (gen-generic-class class)]
        =arg-classes (map% % gen-simple-class arg-classes)
        #let [[included-self included-self-type] (: (, (List AST) (List AST))
                                                    (if <use-self?>
                                                      [(@list g!self) (@list (class->type class))]
                                                      [(@list) (@list)]))
              
              [body return-type] (gen-expected-output expected-output
                                                      (` (<op> (~ =class) (~ (text$ method)) [(~@ =arg-classes)] (~@ included-self) [(~@ vars)])))
              [body return-type] (if unsafe?
                                   [(` (try (~ body))) (` (Either Text (~ return-type)))]
                                   [body return-type])]]
       (wrap (@list (` (: (-> (, (~@ var-types))
                              (~@ included-self-type)
                              (~ return-type))
                          (lambda [[(~@ vars)] (~@ included-self)]
                            (let [(~@ var-rebinds)]
                              (~ body)))))))
       ))]

  [invoke-virtual$   ;_jvm_invokevirtual   true]
  [invoke-interface$ ;_jvm_invokeinterface true]
  [invoke-special$   ;_jvm_invokespecial   true]
  [invoke-static$    ;_jvm_invokestatic    false]
  )
