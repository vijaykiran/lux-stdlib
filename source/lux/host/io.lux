##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (lux (data (list #refer #all #open ("" List/Fold)))
              (codata io)
              (meta ast
                    syntax
                    lux)
              control/monad)
         (.. jvm))

## [Functions]
(do-template [<name> <method> <type> <class>]
  [(def #export (<name> x)
     (-> <type> (IO (,)))
     (@io (_jvm_invokevirtual "java.io.PrintStream" <method> [<class>]
                              (_jvm_getstatic "java.lang.System" "out") [x])))]

  [write-char "print"   Char "char"]
  [write      "print"   Text "java.lang.String"]
  [write-line "println" Text "java.lang.String"]
  )

(do-template [<name> <type> <op>]
  [(def #export <name>
     (IO (Maybe <type>))
     (let [in (_jvm_getstatic "java.lang.System" "in")
           reader (_jvm_new "java.io.InputStreamReader" ["java.io.InputStream"] [in])
           buff-reader (_jvm_new "java.io.BufferedReader" ["java.io.Reader"] [reader])]
       (@io (let [output (: (Either Text <type>) (try <op>))
                  _close (: (Either Text (,)) (try (_jvm_invokeinterface "java.io.Closeable" "close" [] buff-reader [])))]
              (case [output _close]
                (\or [(#;Left _) _] [_ (#;Left _)]) #;None
                [(#;Right input) (#;Right _)]       (#;Some input))))))]

  [read-char Char (_jvm_i2c (_jvm_invokevirtual "java.io.BufferedReader" "read" [] buff-reader []))]
  [read-line Text (_jvm_invokevirtual "java.io.BufferedReader" "readLine" [] buff-reader [])]
  )

## [Syntax]
(def simple-bindings^
  (Parser (List (, Text AST)))
  (tuple^ (*^ (&^ local-symbol^ id^))))

(defsyntax #export (with-open [bindings simple-bindings^] body)
  (do Lux/Monad
    [g!output (gensym "output")
     #let [code (foldL (: (-> AST (, Text AST) AST)
                          (lambda [body [res-name res-value]]
                            (let [g!res-name (symbol$ ["" res-name])]
                              (` (let [(~ g!res-name) (~ res-value)
                                       (~ g!output) (~ body)]
                                   (exec (;_jvm_invokeinterface "java.io.Closeable" "close" [] (~ g!res-name) [])
                                     (~ g!output)))))))
                       body
                       (reverse bindings))]]
    (wrap (@list code))))
