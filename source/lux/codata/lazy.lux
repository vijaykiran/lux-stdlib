##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (lux (meta ast)
              (control (functor #as F #refer #all)
                       (monad   #as M #refer #all))
              (data list))
         (.. function))

## [Types]
(deftype #export (Lazy a)
  (All [b]
    (-> (-> a b) b)))

## [Syntax]
(defmacro #export (... tokens state)
  (case tokens
    (\ (@list value))
    (let [blank (symbol$ ["" ""])]
      (#;Right [state (@list (` (;lambda [(~ blank)] ((~ blank) (~ value)))))]))
    
    _
    (#;Left "Wrong syntax for ...")))

## [Functions]
(def #export (! thunk)
  (All [a]
    (-> (Lazy a) a))
  (thunk id))

(def #export (call/cc f)
  (All [a b c] (Lazy (-> a (Lazy b c)) (Lazy a c)))
  (lambda [k]
    (f (lambda [a _]
         (k a))
       k)))

(def #export (run-lazy l k)
  (All [a z] (-> (Lazy a z) (-> a z) z))
  (l k))

## [Structs]
(defstruct #export Lazy/Functor (Functor Lazy)
  (def (map f ma)
    (lambda [k] (ma (. k f)))))

(defstruct #export Lazy/Monad (Monad Lazy)
  (def _functor Lazy/Functor)

  (def (wrap a)
    (... a))

  (def join !))
