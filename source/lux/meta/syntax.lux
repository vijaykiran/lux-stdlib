##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (.. ast
             (lux #as l #refer (#only Lux/Monad gensym)))
         (lux (control (functor #as F)
                       (monad #as M #refer (#only do))
                       (eq #as E))
              (data (bool #as b)
                    (char #as c)
                    (text #as t #open ("text:" Text/Monoid Text/Eq))
                    (list #refer #all #open ("" List/Functor List/Fold))
                    (number (int #open ("i" Int/Ord))
                            (real #open ("r" Real/Eq))))))

## [Utils]
(def (first xy)
  (All [a b] (-> (, a b) a))
  (let [[x y] xy]
    x))

(def (join-pairs pairs)
  (All [a] (-> (List (, a a)) (List a)))
  (case pairs
    #;Nil                   #;Nil
    (#;Cons [[x y] pairs']) (@list& x y (join-pairs pairs'))))

(def (pair->tuple [left right])
  (-> (, AST AST) AST)
  (tuple$ (@list left right)))

## [Types]
(deftype #export (Parser a)
  (-> (List AST) (Maybe (, (List AST) a))))

## [Structures]
(defstruct #export Parser/Functor (F;Functor Parser)
  (def (map f ma)
    (lambda [tokens]
      (case (ma tokens)
        #;None
        #;None

        (#;Some [tokens' a])
        (#;Some [tokens' (f a)])))))

(defstruct #export Parser/Monad (M;Monad Parser)
  (def _functor Parser/Functor)

  (def (wrap x tokens)
    (#;Some [tokens x]))

  (def (join mma)
    (lambda [tokens]
      (case (mma tokens)
        #;None
        #;None

        (#;Some [tokens' ma])
        (ma tokens')))))

## [Parsers]
(def #export (id^ tokens)
  (Parser AST)
  (case tokens
    #;Nil                #;None
    (#;Cons [t tokens']) (#;Some [tokens' t])))

(do-template [<name> <type> <tag>]
  [(def #export (<name> tokens)
     (Parser <type>)
     (case tokens
       (#;Cons [[_ (<tag> x)] tokens'])
       (#;Some [tokens' x])

       _
       #;None))]

  [  bool^ Bool  #;BoolS]
  [   int^ Int   #;IntS]
  [  real^ Real  #;RealS]
  [  char^ Char  #;CharS]
  [  text^ Text  #;TextS]
  [symbol^ Ident #;SymbolS]
  [   tag^ Ident #;TagS]
  )

(def #export (assert v tokens)
  (-> Bool (Parser (,)))
  (if v
    (#;Some [tokens []])
    #;None))

(def #export nat^
  (Parser Int)
  (do Parser/Monad
    [n int^
     _ (assert (i>= n 0))]
    (wrap n)))

(do-template [<name> <tag>]
  [(def #export (<name> tokens)
     (Parser Text)
     (case tokens
       (#;Cons [[_ (<tag> ["" x])] tokens'])
       (#;Some [tokens' x])

       _
       #;None))]

  [local-symbol^ #;SymbolS]
  [   local-tag^ #;TagS]
  )

(def (ident:= x y)
  (-> Ident Ident Bool)
  (let [[x1 x2] x
        [y1 y2] y]
    (and (text:= x1 y1)
         (text:= x2 y2))))

(do-template [<name> <type> <tag> <eq>]
  [(def #export (<name> v tokens)
     (-> <type> (Parser Bool))
     (case tokens
       (#;Cons [[_ (<tag> x)] tokens'])
       (#;Some [tokens' (<eq> v x)])

       _
       (#;Some [tokens false])))]

  [  bool?^ Bool    #;BoolS  (:: b;Bool/Eq =)]
  [   int?^ Int      #;IntS  i=]
  [  real?^ Real    #;RealS  r=]
  [  char?^ Char    #;CharS  (:: c;Char/Eq =)]
  [  text?^ Text    #;TextS  (:: t;Text/Eq =)]
  [symbol?^ Ident #;SymbolS ident:=]
  [   tag?^ Ident    #;TagS ident:=]
  )

(do-template [<name> <type> <tag> <eq>]
  [(def #export (<name> v tokens)
     (-> <type> (Parser Unit))
     (case tokens
       (#;Cons [[_ (<tag> x)] tokens'])
       (if (<eq> v x)
         (#;Some [tokens' []])
         #;None)

       _
       #;None))]

  [  bool!^ Bool    #;BoolS  (:: b;Bool/Eq =)]
  [   int!^ Int      #;IntS  i=]
  [  real!^ Real    #;RealS  r=]
  [  char!^ Char    #;CharS  (:: c;Char/Eq =)]
  [  text!^ Text    #;TextS  (:: t;Text/Eq =)]
  [symbol!^ Ident #;SymbolS ident:=]
  [   tag!^ Ident    #;TagS ident:=]
  )

(do-template [<name> <tag>]
  [(def #export (<name> p tokens)
     (All [a]
       (-> (Parser a) (Parser a)))
     (case tokens
       (#;Cons [[_ (<tag> members)] tokens'])
       (case (p members)
         (#;Some [#;Nil x]) (#;Some [tokens' x])
         _                  #;None)

       _
       #;None))]

  [ form^  #;FormS]
  [tuple^ #;TupleS]
  )

(def #export (record^ p tokens)
  (All [a]
    (-> (Parser a) (Parser a)))
  (case tokens
    (#;Cons [[_ (#;RecordS pairs)] tokens'])
    (case (p (map pair->tuple pairs))
      (#;Some [#;Nil x]) (#;Some [tokens' x])
      _                  #;None)

    _
    #;None))

(def #export (?^ p tokens)
  (All [a]
    (-> (Parser a) (Parser (Maybe a))))
  (case (p tokens)
    #;None               (#;Some [tokens #;None])
    (#;Some [tokens' x]) (#;Some [tokens' (#;Some x)])))

(def (run-parser p tokens)
  (All [a]
    (-> (Parser a) (List AST) (Maybe (, (List AST) a))))
  (p tokens))

(def #export (*^ p tokens)
  (All [a]
    (-> (Parser a) (Parser (List a))))
  (case (p tokens)
    #;None               (#;Some [tokens (@list)])
    (#;Some [tokens' x]) (run-parser (do Parser/Monad
                                       [xs (*^ p)]
                                       (wrap (@list& x xs)))
                                     tokens')))

(def #export (+^ p)
  (All [a]
    (-> (Parser a) (Parser (List a))))
  (do Parser/Monad
    [x p
     xs (*^ p)]
    (wrap (@list& x xs))))

(def #export (&^ p1 p2)
  (All [a b]
    (-> (Parser a) (Parser b) (Parser (, a b))))
  (do Parser/Monad
    [x1 p1
     x2 p2]
    (wrap [x1 x2])))

(def #export (|^ p1 p2 tokens)
  (All [a b]
    (-> (Parser a) (Parser b) (Parser (Either a b))))
  (case (p1 tokens)
    (#;Some [tokens' x1]) (#;Some [tokens' (#;Left x1)])
    #;None                (run-parser (do Parser/Monad
                                        [x2 p2]
                                        (wrap (#;Right x2)))
                                      tokens)
    ))

(def #export (||^ ps tokens)
  (All [a]
    (-> (List (Parser a)) (Parser (Maybe a))))
  (case ps
    #;Nil            #;None
    (#;Cons [p ps']) (case (p tokens)
                       #;None               (||^ ps' tokens)
                       (#;Some [tokens' x]) (#;Some [tokens' (#;Some x)]))
    ))

(def #export (end^ tokens)
  (Parser (,))
  (case tokens
    #;Nil      (#;Some [tokens []])
    _          #;None))

## [Syntax]
(defmacro #export (defsyntax tokens)
  (let [[exported? tokens] (case tokens
                             (\ (@list& [_ (#;TagS ["" "export"])] tokens'))
                             [true tokens']

                             _
                             [false tokens])]
    (case tokens
      (\ (@list [_ (#;FormS (@list& [_ (#;SymbolS ["" name])] args))]
                body))
      (do Lux/Monad
        [vars+parsers (M;map% Lux/Monad
                              (: (-> AST (Lux (, AST AST)))
                                 (lambda [arg]
                                   (case arg
                                     (\ [_ (#;TupleS (@list var parser))])
                                     (wrap [var parser])

                                     (\ [_ (#;SymbolS var-name)])
                                     (wrap [(symbol$ var-name) (` id^)])

                                     _
                                     (l;fail "Syntax pattern expects 2-tuples or symbols."))))
                              args)
         g!tokens (gensym "tokens")
         g!_ (gensym "_")
         #let [error-msg (text$ (text:++ "Wrong syntax for " name))
               body' (foldL (: (-> AST (, AST AST) AST)
                               (lambda [body name+parser]
                                 (let [[name parser] name+parser]
                                   (` (;_lux_case ((~ parser) (~ g!tokens))
                                                  (#;Some [(~ g!tokens) (~ name)])
                                                  (~ body)

                                                  (~ g!_)
                                                  (l;fail (~ error-msg)))))))
                            body
                            (: (List (, AST AST)) (@list& [(symbol$ ["" ""]) (` end^)] (reverse vars+parsers))))
               macro-def (` (defmacro ((~ (symbol$ ["" name])) (~ g!tokens))
                              (~ body')))]]
        (wrap (@list& macro-def
                      (if exported?
                        (@list (` (;_lux_export (~ (symbol$ ["" name])))))
                        (@list)))))
      
      _
      (l;fail "Wrong syntax for defsyntax"))))
