##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (.. (functor #as F)
             (monoid #as M)))

## [Utils]
(def (foldL f init xs)
  (All [a b]
    (-> (-> a b a) a (List b) a)) 
  (case xs
    #;Nil
    init

    (#;Cons x xs')
    (foldL f (f init x) xs')))

(def (reverse xs)
  (All [a]
    (-> (List a) (List a)))
  (foldL (lambda [tail head] (#;Cons head tail))
         #;Nil
         xs))

(def (as-pairs xs)
  (All [a] (-> (List a) (List (, a a))))
  (case xs
    (#;Cons x1 (#;Cons x2 xs'))
    (#;Cons [x1 x2] (as-pairs xs'))

    _
    #;Nil))

## [Signatures]
(defsig #export (Monad m)
  (: (F;Functor m)
     _functor)
  (: (All [a]
       (-> a (m a)))
     wrap)
  (: (All [a]
       (-> (m (m a)) (m a)))
     join))

## [Syntax]
(defmacro #export (do tokens state)
  (case tokens
    (#;Cons monad (#;Cons [_ (#;TupleS bindings)] (#;Cons body #;Nil)))
    (let [g!map (: AST [["" -1 -1] (#;SymbolS ["" " map "])])
          g!join (: AST [["" -1 -1] (#;SymbolS ["" " join "])])
          body' (foldL (: (-> AST (, AST AST) AST)
                          (lambda [body' binding]
                            (let [[var value] binding]
                              (case var
                                [_ (#;TagS ["" "let"])]
                                (` (let (~ value) (~ body')))

                                _
                                (` (|> (~ value) ((~ g!map) (lambda [(~ var)] (~ body'))) (~ g!join)))
                                ))))
                       body
                       (reverse (as-pairs bindings)))]
      (#;Right [state (#;Cons (` (case (~ monad)
                                   {#_functor {#F;map (~ g!map)} #wrap (~ (' wrap)) #join (~ g!join)}
                                   (~ body')))
                              #;Nil)]))

    _
    (#;Left "Wrong syntax for do")))

## [Functions]
(def #export (bind m f ma)
  (All [m a b]
    (-> (Monad m) (-> a (m b)) (m a) (m b)))
  (using m
    (join (map f ma))))

(def #export (seq% monad xs)
  (All [M a]
    (-> (Monad M) (List (M a)) (M (List a))))
  (case xs
    #;Nil
    (:: monad (wrap #;Nil))
    
    (#;Cons x xs')
    (do monad
      [_x x
       _xs (seq% monad xs')]
      (wrap (#;Cons _x _xs)))
    ))

(def #export (map% monad f xs)
  (All [M a b]
    (-> (Monad M) (-> a (M b)) (List a) (M (List b))))
  (case xs
    #;Nil
    (:: monad (wrap #;Nil))
    
    (#;Cons x xs')
    (do monad
      [_x (f x)
       _xs (map% monad f xs')]
      (wrap (#;Cons _x _xs)))
    ))
