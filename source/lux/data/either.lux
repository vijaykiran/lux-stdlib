##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (lux (control (functor #as F #refer #all)
                       (monad #as M #refer #all))
              (data (list #refer (#exclude partition)))))

## [Types]
## (deftype (Either l r)
##   (| (#;Left l)
##      (#;Right r)))

## [Functions]
(def #export (either f g e)
  (All [a b c] (-> (-> a c) (-> b c) (Either a b) c))
  (case e
    (#;Left x)  (f x)
    (#;Right x) (g x)))

(do-template [<name> <side> <tag>]
  [(def #export (<name> es)
     (All [a b] (-> (List (Either a b)) (List <side>)))
     (case es
       #;Nil                    #;Nil
       (#;Cons [(<tag> x) es']) (#;Cons [x (<name> es')])
       (#;Cons [_ es'])         (<name> es')))]

  [lefts  a #;Left]
  [rights b #;Right]
  )

(def #export (partition xs)
  (All [a b] (-> (List (Either a b)) (, (List a) (List b))))
  (case xs
    #;Nil
    [#;Nil #;Nil]

    (#;Cons x xs')
    (let [[lefts rights] (partition xs')]
      (case x
        (#;Left x')  [(#;Cons x' lefts) rights]
        (#;Right x') [lefts (#;Cons x' rights)]))))

## [Structures]
(defstruct #export Error/Functor (All [a] (Functor (Either a)))
  (def (map f ma)
    (case ma
      (#;Left msg)    (#;Left msg)
      (#;Right datum) (#;Right (f datum)))))

(defstruct #export Error/Monad (All [a] (Monad (Either a)))
  (def _functor Error/Functor)

  (def (wrap a)
    (#;Right a))

  (def (join mma)
    (case mma
      (#;Left msg) (#;Left msg)
      (#;Right ma) ma)))
